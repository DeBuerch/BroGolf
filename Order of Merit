class Tournament:
    def __init__(self, name, date, course_rating):
        self.name = name
        self.date = date
        self.course_rating = course_rating
        self.results = {}

class Player:
    def __init__(self, name):
        self.name = name
        self.tournament_results = []

def calculate_points(score, course_rating):
    base_points = 100
    return base_points + ((course_rating - score) * 5)

def add_tournament_result(player, tournament, score):
    points = calculate_points(score, tournament.course_rating)
    player.tournament_results.append((tournament, points))

def calculate_order_of_merit(players):
    order_of_merit = {}
    for player in players:
        best_results = sorted(player.tournament_results, key=lambda x: x[1], reverse=True)[:3]
        total_points = sum(points for _, points in best_results)
        order_of_merit[player.name] = total_points
    return sorted(order_of_merit.items(), key=lambda x: x[1], reverse=True)

# Beispielverwendung
tournaments = [
    Tournament("Spring Open", "2025-04-15", 72),
    Tournament("Summer Classic", "2025-06-20", 71),
    Tournament("Fall Championship", "2025-09-10", 73)
]

players = [Player("Alice"), Player("Bob"), Player("Charlie")]

# Ergebnisse hinzuf√ºgen
add_tournament_result(players[0], tournaments[0], 70)
add_tournament_result(players[1], tournaments[0], 72)
add_tournament_result(players[2], tournaments[0], 75)

add_tournament_result(players[0], tournaments[1], 69)
add_tournament_result(players[1], tournaments[1], 71)
add_tournament_result(players[2], tournaments[1], 73)

add_tourna
